/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as TerritoriesRouteImport } from './routes/territories'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as MapRouteImport } from './routes/map'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as CompaniesTableRouteImport } from './routes/companies-table'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const TerritoriesRoute = TerritoriesRouteImport.update({
  id: '/territories',
  path: '/territories',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const CompaniesTableRoute = CompaniesTableRouteImport.update({
  id: '/companies-table',
  path: '/companies-table',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/companies-table': typeof CompaniesTableRoute
  '/demo': typeof DemoRoute
  '/map': typeof MapRoute
  '/profile': typeof ProfileRoute
  '/settings': typeof SettingsRoute
  '/territories': typeof TerritoriesRoute
  '/test': typeof TestRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/companies-table': typeof CompaniesTableRoute
  '/demo': typeof DemoRoute
  '/map': typeof MapRoute
  '/profile': typeof ProfileRoute
  '/settings': typeof SettingsRoute
  '/territories': typeof TerritoriesRoute
  '/test': typeof TestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/companies-table': typeof CompaniesTableRoute
  '/demo': typeof DemoRoute
  '/map': typeof MapRoute
  '/profile': typeof ProfileRoute
  '/settings': typeof SettingsRoute
  '/territories': typeof TerritoriesRoute
  '/test': typeof TestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/companies-table'
    | '/demo'
    | '/map'
    | '/profile'
    | '/settings'
    | '/territories'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/companies-table'
    | '/demo'
    | '/map'
    | '/profile'
    | '/settings'
    | '/territories'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/companies-table'
    | '/demo'
    | '/map'
    | '/profile'
    | '/settings'
    | '/territories'
    | '/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CompaniesTableRoute: typeof CompaniesTableRoute
  DemoRoute: typeof DemoRoute
  MapRoute: typeof MapRoute
  ProfileRoute: typeof ProfileRoute
  SettingsRoute: typeof SettingsRoute
  TerritoriesRoute: typeof TerritoriesRoute
  TestRoute: typeof TestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/territories': {
      id: '/territories'
      path: '/territories'
      fullPath: '/territories'
      preLoaderRoute: typeof TerritoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/companies-table': {
      id: '/companies-table'
      path: '/companies-table'
      fullPath: '/companies-table'
      preLoaderRoute: typeof CompaniesTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CompaniesTableRoute: CompaniesTableRoute,
  DemoRoute: DemoRoute,
  MapRoute: MapRoute,
  ProfileRoute: ProfileRoute,
  SettingsRoute: SettingsRoute,
  TerritoriesRoute: TerritoriesRoute,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
